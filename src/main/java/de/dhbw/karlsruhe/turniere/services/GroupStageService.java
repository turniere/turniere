package de.dhbw.karlsruhe.turniere.services;

import de.dhbw.karlsruhe.turniere.database.models.Group;
import de.dhbw.karlsruhe.turniere.database.models.GroupStage;
import de.dhbw.karlsruhe.turniere.database.models.Match;
import de.dhbw.karlsruhe.turniere.database.models.Team;
import de.dhbw.karlsruhe.turniere.database.models.Tournament;
import de.dhbw.karlsruhe.turniere.database.repositories.GroupRepository;
import de.dhbw.karlsruhe.turniere.database.repositories.GroupStageRepository;
import de.dhbw.karlsruhe.turniere.database.repositories.MatchRepository;
import de.dhbw.karlsruhe.turniere.database.repositories.TeamRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

import static java.util.Comparator.comparing;
import static java.util.stream.Collectors.toList;

@Component
@RequiredArgsConstructor
public class GroupStageService {

    private final GroupStageRepository groupStageRepository;
    private final MatchService matchService;
    private final GroupRepository groupRepository;
    private final MatchRepository matchRepository;
    private final TeamRepository teamRepository;
    private final PlayoffService playoffService;

    /**
     * Generates and fills the GroupStage (with given groupSize) of given tournament and adds it to given owner
     *
     * @param origTeams  List of Teams to generate GroupStage with
     * @param tournament Tournament to add GroupStage to
     * @param groupSize  Size of the given Groups
     * @return Generated GroupStage populated with Groups and Matches
     */
    public GroupStage generateGroupStage(List<Team> origTeams, Tournament tournament, Integer groupSize, int playoffSize) {
        List<Team> teams = new ArrayList<>(origTeams);
        int requiredGroupCount = teams.size() / groupSize;
        List<Group> groups = new ArrayList<>();
        //first group Name
        char name = 'A';

        //iterate through number of groups
        for (int i = 0; i < requiredGroupCount; i++) {
            groups.add(new Group((char) ((int) name + i)));
            List<Team> groupTeams = new ArrayList<>();
            //generate list of teams to add to group
            for (int j = 0; j < origTeams.size() / requiredGroupCount; j++) {
                groupTeams.add(teams.get(0));
                teams.remove(0);
            }
            //add teams to group
            groups.get(i).setTeams(groupTeams);
            //add matches between all teams to group
            groups.get(i).setMatches(generateAllPossibleMatches(groupTeams));
        }
        //save everything in database
        Iterable<Group> savedGroupsIterable = groupRepository.saveAll(groups);
        List<Group> savedGroups = new ArrayList<>();
        savedGroupsIterable.forEach(savedGroups::add);
        GroupStage groupStage = new GroupStage(savedGroups);
        groupStage.setPlayoffSize(playoffSize);
        groupStage = groupStageRepository.save(groupStage);
        tournament.setGroupStage(groupStage);

        return groupStage;
    }

    /**
     * Generates all possible Matchups between given Teams
     *
     * @param origTeams Teams to generate Matches with
     * @return List of Matches containing all possible Matchups of given Teams
     */
    private List<Match> generateAllPossibleMatches(List<Team> origTeams) {
        List<Match> matches = new ArrayList<>();
        List<Team> teams = new ArrayList<>(origTeams);
        //initial position of first match
        int position = 0;

        int cycle = teams.size();
        //iterates through all teams
        for (int i = 0; i < cycle; i++) {
            Team team1 = teams.get(0);
            //iterates through all teams except first
            for (int j = 1; j < teams.size(); j++) {
                Team team2 = teams.get(j);
                //add match to list with every combination of teams
                matches.add(new Match(team1, team2, 0, 0, Match.State.NOT_STARTED, position++, true));
            }
            //remove first team from list since all games for this team are generated by now
            teams.remove(0);
        }

        //save everything to database
        Iterable<Match> savedMatchesIterable = matchRepository.saveAll(matches);
        List<Match> savedMatches = new ArrayList<>();
        savedMatchesIterable.forEach(savedMatches::add);

        return matches;
    }

    public void updateTeamPoints(Team team) {
        Group group = groupRepository.findByTeamsContains(team);
        List<Team> allTeams = group.getTeams();
        List<Match> allMatches = group.getMatches().stream().filter(match -> match.getTeam1().equals(team) || match.getTeam2().equals(team)).collect(toList());
        int pointsRecieved = 0;
        int pointsScored = 0;
        int score = 0;
        for (Match match : allMatches) {
            Match.State matchState;
            if (match.getState() == Match.State.IN_PROGRESS) {
                matchState = matchService.evaluateWinner(match);
            } else {
                matchState = match.getState();
            }
            if (match.getTeam1() == team) {
                pointsScored = pointsScored + match.getScoreTeam1();
                pointsRecieved = pointsRecieved + match.getScoreTeam2();
                if (matchState == Match.State.TEAM1_WON) {
                    score = score + 3;
                } else if (matchState == Match.State.UNDECIDED) {
                    score = score + 1;
                }
            } else if (match.getTeam2() == team) {
                pointsRecieved = pointsRecieved + match.getScoreTeam1();
                pointsScored = pointsScored + match.getScoreTeam2();
                if (matchState == Match.State.TEAM2_WON) {
                    score = score + 3;
                } else if (matchState == Match.State.UNDECIDED) {
                    score = score + 1;
                }

            }

        }
        team.setGroupPointsReceived(pointsRecieved);
        team.setGroupPointsScored(pointsScored);
        team.setGroupScore(score);
        int allTeamsSize = allTeams.size();
        for (int i = 0; i < allTeamsSize; i++) {
            allTeams.get(i).setGroupPlace(0);
        }
        sortTeams(allTeams);
        for (int i = 0; i < allTeamsSize; i++) {
            allTeams.get(i).setGroupPlace(i);
        }
        teamRepository.saveAll(allTeams);
    }

    public Boolean isGroupOver(Match match) {
        return isOver(groupRepository.findByMatchesContains(match));
    }

    public List<Team> sortTeams(List<Team> teams) {
        teams.sort(Comparator.comparingInt(Team::getGroupPlace)
                .thenComparing(comparing(Team::getGroupScore).reversed())
                .thenComparing(comparing(Team::getGroupPointsScored).reversed())
                .thenComparing(Team::getGroupPointsReceived));
        return teams;
    }

    public List<Team> getPlayoffTeams(GroupStage groupStage) {
        List<Team> playoffTeams = new ArrayList<>();
        List<Group> groups = groupStage.getGroups();
        int groupNumber = groups.size();
        int groupSize = groups.get(0).getTeams().size();
        int playoffSize = groupStage.getPlayoffSize();

        Double howManyPlacesFitDouble = (double) playoffSize / groupNumber;
        int howManyPlacesFitInt = howManyPlacesFitDouble.intValue();

        for (int j = 0; j < howManyPlacesFitInt; j++) {
            for (int i = 0; i < groupNumber; i++) {
                List<Team> teamsOfGroup = groups.get(i).getTeams();
                teamsOfGroup.sort(Comparator.comparingInt(Team::getGroupPlace));
                Team team = teamsOfGroup.get(j);
                playoffTeams.add(team);
            }
        }
        if (playoffTeams.size() != playoffSize) {
            List<Team> remainingTeams = new ArrayList<>();
            for (int i = 0; i < groupNumber; i++) {
                remainingTeams.add(groups.get(i).getTeams().get(howManyPlacesFitInt));
            }
            sortTeams(remainingTeams);

            int remainingTeamsNeeded = playoffSize - playoffTeams.size();
            for (int i = 0; i < (remainingTeamsNeeded); i++) {
                playoffTeams.add(remainingTeams.get(i));
            }

        }

        return playoffTeams;
    }

    public Boolean isGroupStageOver(GroupStage groupStage) {
        for (Group group : groupStage.getGroups()) {
            if (!isOver(group)) {
                return false;
            }
        }
        return true;
    }

    public Boolean isOver(Group group) {
        for (Match match : group.getMatches()) {
            Match.State state = match.getState();
            if (state == Match.State.NOT_STARTED || state == Match.State.IN_PROGRESS) {
                return false;
            }
        }
        return true;
    }

}
